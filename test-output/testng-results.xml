<?xml version="1.0" encoding="UTF-8"?>
<testng-results skipped="0" failed="1" ignored="0" total="5" passed="4">
  <reporter-output>
  </reporter-output>
  <suite name="Default suite" duration-ms="3230" started-at="2019-12-09T14:54:13 CST" finished-at="2019-12-09T14:54:16 CST">
    <groups>
    </groups>
    <test name="Default test" duration-ms="3230" started-at="2019-12-09T14:54:13 CST" finished-at="2019-12-09T14:54:16 CST">
      <class name="getWeatherRequests.GetWeatherByCityName">
        <test-method status="PASS" signature="callWeatherEndpoint()[pri:0, instance:getWeatherRequests.GetWeatherByCityName@1efed156]" name="callWeatherEndpoint" is-config="true" duration-ms="2144" started-at="2019-12-09T14:54:13 CST" finished-at="2019-12-09T14:54:15 CST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- callWeatherEndpoint -->
        <test-method status="PASS" signature="testResponseCodeIs200()[pri:1, instance:getWeatherRequests.GetWeatherByCityName@1efed156]" name="testResponseCodeIs200" duration-ms="25" started-at="2019-12-09T14:54:15 CST" finished-at="2019-12-09T14:54:15 CST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testResponseCodeIs200 -->
        <test-method status="PASS" signature="testResponseBodyIsNotEmpty()[pri:2, instance:getWeatherRequests.GetWeatherByCityName@1efed156]" name="testResponseBodyIsNotEmpty" duration-ms="147" started-at="2019-12-09T14:54:15 CST" finished-at="2019-12-09T14:54:15 CST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testResponseBodyIsNotEmpty -->
        <test-method status="PASS" signature="testResponseSchema()[pri:3, instance:getWeatherRequests.GetWeatherByCityName@1efed156]" name="testResponseSchema" duration-ms="860" started-at="2019-12-09T14:54:15 CST" finished-at="2019-12-09T14:54:16 CST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testResponseSchema -->
        <test-method status="FAIL" signature="testResponseSchemaWrong()[pri:4, instance:getWeatherRequests.GetWeatherByCityName@1efed156]" name="testResponseSchemaWrong" duration-ms="13" started-at="2019-12-09T14:54:16 CST" finished-at="2019-12-09T14:54:16 CST">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[1 expectation failed.
Response body doesn't match expectation.
Expected: The content to match the given JSON schema.
warning: the following keywords are unknown and will be ignored: [examples]
    level: "warning"
    schema: {"loadingURI":"file:/Users/sergiof/eclipse-workspace/rest-assured-example/target/test-classes/json/schemas/city-weather-schema-wrong.json#","pointer":"/properties/wrongProperty1"}
    domain: "syntax"
    ignored: ["examples"]
warning: the following keywords are unknown and will be ignored: [examples]
    level: "warning"
    schema: {"loadingURI":"file:/Users/sergiof/eclipse-workspace/rest-assured-example/target/test-classes/json/schemas/city-weather-schema-wrong.json#","pointer":"/properties/wrongProperty2"}
    domain: "syntax"
    ignored: ["examples"]
error: object has missing required properties (["wrongProperty1","wrongPropety2"])
    level: "error"
    schema: {"loadingURI":"file:/Users/sergiof/eclipse-workspace/rest-assured-example/target/test-classes/json/schemas/city-weather-schema-wrong.json#","pointer":""}
    instance: {"pointer":""}
    domain: "validation"
    keyword: "required"
    required: ["wrongProperty1","wrongPropety2"]
    missing: ["wrongProperty1","wrongPropety2"]

  Actual: {"coord":{"lon":-0.13,"lat":51.51},"weather":[{"id":300,"main":"Drizzle","description":"light intensity drizzle","icon":"09d"}],"base":"stations","main":{"temp":280.32,"pressure":1012,"humidity":81,"temp_min":279.15,"temp_max":281.15},"visibility":10000,"wind":{"speed":4.1,"deg":80},"clouds":{"all":90},"dt":1485789600,"sys":{"type":1,"id":5091,"message":0.0103,"country":"GB","sunrise":1485762037,"sunset":1485794875},"id":2643743,"name":"London","cod":200}
]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: 1 expectation failed.
Response body doesn't match expectation.
Expected: The content to match the given JSON schema.
warning: the following keywords are unknown and will be ignored: [examples]
    level: "warning"
    schema: {"loadingURI":"file:/Users/sergiof/eclipse-workspace/rest-assured-example/target/test-classes/json/schemas/city-weather-schema-wrong.json#","pointer":"/properties/wrongProperty1"}
    domain: "syntax"
    ignored: ["examples"]
warning: the following keywords are unknown and will be ignored: [examples]
    level: "warning"
    schema: {"loadingURI":"file:/Users/sergiof/eclipse-workspace/rest-assured-example/target/test-classes/json/schemas/city-weather-schema-wrong.json#","pointer":"/properties/wrongProperty2"}
    domain: "syntax"
    ignored: ["examples"]
error: object has missing required properties (["wrongProperty1","wrongPropety2"])
    level: "error"
    schema: {"loadingURI":"file:/Users/sergiof/eclipse-workspace/rest-assured-example/target/test-classes/json/schemas/city-weather-schema-wrong.json#","pointer":""}
    instance: {"pointer":""}
    domain: "validation"
    keyword: "required"
    required: ["wrongProperty1","wrongPropety2"]
    missing: ["wrongProperty1","wrongPropety2"]

  Actual: {"coord":{"lon":-0.13,"lat":51.51},"weather":[{"id":300,"main":"Drizzle","description":"light intensity drizzle","icon":"09d"}],"base":"stations","main":{"temp":280.32,"pressure":1012,"humidity":81,"temp_min":279.15,"temp_max":281.15},"visibility":10000,"wind":{"speed":4.1,"deg":80},"clouds":{"all":90},"dt":1485789600,"sys":{"type":1,"id":5091,"message":0.0103,"country":"GB","sunrise":1485762037,"sunset":1485794875},"id":2643743,"name":"London","cod":200}

at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
at org.codehaus.groovy.reflection.CachedConstructor.invoke(CachedConstructor.java:80)
at org.codehaus.groovy.reflection.CachedConstructor.doConstructorInvoke(CachedConstructor.java:74)
at org.codehaus.groovy.runtime.callsite.ConstructorSite$ConstructorSiteNoUnwrap.callConstructor(ConstructorSite.java:84)
at org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCallConstructor(CallSiteArray.java:59)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callConstructor(AbstractCallSite.java:237)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callConstructor(AbstractCallSite.java:249)
at io.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure.validate(ResponseSpecificationImpl.groovy:493)
at io.restassured.internal.ResponseSpecificationImpl$HamcrestAssertionClosure$validate$1.call(Unknown Source)
at io.restassured.internal.ResponseSpecificationImpl.validateResponseIfRequired(ResponseSpecificationImpl.groovy:674)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.codehaus.groovy.runtime.callsite.PlainObjectMetaMethodSite.doInvoke(PlainObjectMetaMethodSite.java:43)
at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite$PogoCachedMethodSiteNoUnwrapNoCoerce.invoke(PogoMetaMethodSite.java:190)
at org.codehaus.groovy.runtime.callsite.PogoMetaMethodSite.callCurrent(PogoMetaMethodSite.java:58)
at org.codehaus.groovy.runtime.callsite.AbstractCallSite.callCurrent(AbstractCallSite.java:168)
at io.restassured.internal.ResponseSpecificationImpl.body(ResponseSpecificationImpl.groovy:98)
at io.restassured.internal.ValidatableResponseOptionsImpl.body(ValidatableResponseOptionsImpl.java:238)
at io.restassured.internal.ValidatableResponseImpl.super$2$body(ValidatableResponseImpl.groovy)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:101)
at groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:323)
at groovy.lang.MetaClassImpl.invokeMethod(MetaClassImpl.java:1217)
at org.codehaus.groovy.runtime.ScriptBytecodeAdapter.invokeMethodOnSuperN(ScriptBytecodeAdapter.java:144)
at io.restassured.internal.ValidatableResponseImpl.body(ValidatableResponseImpl.groovy:293)
at io.restassured.internal.ValidatableResponseImpl.body(ValidatableResponseImpl.groovy)
at getWeatherRequests.GetWeatherByCityName.testResponseSchemaWrong(GetWeatherByCityName.java:81)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:584)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:172)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:804)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:145)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.util.ArrayList.forEach(ArrayList.java:1257)
at org.testng.TestRunner.privateRun(TestRunner.java:770)
at org.testng.TestRunner.run(TestRunner.java:591)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:402)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:396)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:355)
at org.testng.SuiteRunner.run(SuiteRunner.java:304)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1180)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1102)
at org.testng.TestNG.runSuites(TestNG.java:1032)
at org.testng.TestNG.run(TestNG.java:1000)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testResponseSchemaWrong -->
        <test-method status="PASS" signature="testResponseTime()[pri:5, instance:getWeatherRequests.GetWeatherByCityName@1efed156]" name="testResponseTime" duration-ms="11" started-at="2019-12-09T14:54:16 CST" finished-at="2019-12-09T14:54:16 CST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testResponseTime -->
      </class> <!-- getWeatherRequests.GetWeatherByCityName -->
    </test> <!-- Default test -->
  </suite> <!-- Default suite -->
</testng-results>
